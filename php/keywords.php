<?php
// File:      keywords.php
// Purpose:   Functions for displaying keywords in HTML
// 2018-12-06 barry@electromagneticsoftware.com

 function showKeywordListBreadcrumb($keywords) {
    // input: array of strings
    // used by detail.html
    global $resultPage;
    echo "<a href=\"$resultPage\">";  // TODO change link target to repeat search and show results
    for ($ii=0; $ii<sizeof($keywords); $ii++) {
        if ($ii>0) { echo "and "; }
        echo "$keywords[$ii] ";  
    }
    echo "</a>";
}

function showKeywordSearchListDetail($keywords) {
    // Given an array of keywords, compose an entire "<a href=" tag 
    //
    // input: array of strings
    // used by detail.html
    global $resultPage;
    //showFencepost(__FILE__, __LINE__);  // debug

    $link_target = makeLinkTargetFromList($resultPage, $keywords, 'aaa');   // debug - fix me - TODO - argument 3 should be, what?
    for ($ii=0; $ii<sizeof($keywords); $ii++) {
        if ($ii>0) { echo "and "; }
        printf('<a class="btn btn-primary" href="%s" alt="%s" title="%s">%s</a>', $link_target, $keywords[$ii], $keywords[$ii]);
    }
}

function showKeywordList($key_attributes) {
    // Echo a formatted list of keywords associated with a single image
    global $resultPage;
    $ii = 0;
    foreach ($key_attributes as $tag) {
        $ii++;
        if ($tag == 'BR') {
            echo '<br/>'.PHP_EOL;
            $ii = 0;
        } else {
            if ($ii > 1) { echo '-'; }
            $target = $resultPage . '?key1=' . urlencode($tag);
            printf('<a class="btn btn-primary" href="%s" title="See all %s">%s</a>', $target, $tag, $tag);
        }
    }
}

function showOneKeywordHierarchyAsButtons($key_hierarchy) {
    // (replaces "showKeywordList()" above, now that we have real Lightroom keywords)
    // Echo a formatted list of keywords associated with a single image
    // input: array of strings for one single keyword, e.g. array('~1~AGENTS', 'People', 'Adults')
    global $resultPage;

    echo '        ';
    for ($ii=1; $ii<sizeof($key_hierarchy); $ii++) {   // don't start at [0] since $list[0] is the top-level category and it's already output
        if ($ii > 1) { echo '-'; }
        $tag = $key_hierarchy[$ii];
        $target = $resultPage . '?key1=' . urlencode($tag);
        printf('<a class="btn btn-primary" href="%s" title="See all %s">%s</a>', $target, $tag, $tag);
    }
    if (sizeof($key_hierarchy) > 1) {
        // if the above outputs anything at all, then start the next set items on a new line
        echo '<br/>'.PHP_EOL;
    }
}

function showAllKeywordLists( $hierarchical_keywords ) {
    // Echo the complete set of all hierarchical keywords for this image, as generated by Lightroom
    // input: array of strings in alphabetical order, each one is a pipe-separated string of hierarchy
    //        e.g. "~3~ENTITIES|Buildings|School buildings|Richmond Beach School"
    //        results are grouped together by the first part of the keyword
    // Example output:
    //        <div class="row row-of-keys">
    //          <div class="col-sm-2">Attributes:</div>
    //          <div class="col-sm-10">
    //            <a href="result.html?key=Decades">Decades</a>-<a href="result.html?key=18s">18s</a>-<a href="result.html?key=1870s">1870s</a><br/>
    //            <a href="result.html?key=Photo+properties">Photo properties</a>-<a href="result.html?key=Portraits">Portraits</a>-<a href="result.html?key=Individuals">Individuals</a><br/>
    //            <a href="result.html?key=Photo+properties">Photo properties</a>-<a href="result.html?key=Studio+shots">Studio shots</a>
    //          </div>
    //        </div>
    function startGroup($groupname) {
        echo '        <div class="row row-of-keys">'.PHP_EOL;
        echo '          <div class="col-sm-2">'.$groupname.':</div>'.PHP_EOL;
        echo '          <div class="col-sm-10">'.PHP_EOL;
    }
    function endGroup($groupname) {
        if ($groupname != '') {
            echo '          </div>'.PHP_EOL;
            echo '        </div>'.PHP_EOL;
        }
    }

    //debugDump($hierarchical_keywords, __FILE__, __LINE__);   // debug

    if (empty($hierarchical_keywords)) {
        showWarning('No hierarchical keywords found in this image.');
    } else {

        $prevgroup = '';    // keep track of the top-level hierarchy, and group their items together
        foreach ($hierarchical_keywords as $keyset) {
            $list = explode( '|', $keyset);
            if ($list[0] != $prevgroup) {
                // new top-level hierarchy, so close this row and start a new one
                endGroup($prevgroup);
                startGroup($list[0]);
                $prevgroup = $list[0];
            }
            // issue a new line of keyword buttons
            showOneKeywordHierarchyAsButtons($list);
        }
        endGroup($prevgroup);
    }
}

function makeLink($keyword) {
    // create a "link to search for a single given keyword"
    global $resultPage;
    $link = '<a href="%s?key1=%s">%s</a>';  // format for returned link
    return sprintf($link, $resultPage, urlencode($keyword), $keyword );
}

function showSkipList($keywordtree) {
    // Since the web page showing the keyword tree can become extremely long, 
    // provide this little in-page navigation aid in the upper-right corner
    // output: HTML
    $format = '<a href="#%s">%s</a><br/>';
    foreach ($keywordtree as $key1=>$info1) {
        printf($format, strtolower($key1), $key1);
    }
}

function ignore($key) {
    // while traversing the keyword tree, see if this item in the data structure should be skipped
    if ($key == 'count') return true;
    if (is_numeric($key)) return true;
    return false;
}

function treeOut($tree, $level=1, $indent='') {
    // For example and test, here's the simplest possible way to show the keyword hierarchy
    // This is a recursive routine that handles all nesting levels with the same basic list format
    // input:  $tree = data structure containing entire hierarchical keyword structure
    //         $level = number that counts the nesting level
    //         $indent = string containing spaces corresponding to indention level
    global $levelLimit;
    $result = '';
    foreach ($tree as $key => $info) {
        if (ignore($key)) continue;
        if ($levelLimit && $level>$levelLimit) break; // debug: reduce the amount of output

        $result .= PHP_EOL.$indent.'  <li>';
        if (is_array($info)) {
            $result .= $key . treeOut($info, $level+1, $indent.'    ');
        } else {
            $result .= $info;
        }
        $result .= '</li>';
    }
    if (strlen($result) > 0) {
        // if this step issued any <li> at all (above), then they must be surrounded with <ol>...</ol>
        $result = PHP_EOL
                .$indent."<ol class=\"nest$level\">".$result.PHP_EOL
                .$indent."</ol>";
    }
    return $result;
}
function showTree($tree, $keyword_to_files, $level=1, $indent='') {
    // Display the hierarchical keyword tree
    // This is a recursive routine.
    // Walk through the entire keyword tree, outputting HTML as we go.
    // If you want it sorted alphabetically, then put it in order before calling showTree().
    // input:  $tree = data structure containing entire hierarchical keyword structure
    //         $keyword_to_files = data structure for "how many files are associated with each keyword"
    //         $level = number that counts the nesting level
    //         $indent = string containing spaces corresponding to indention level
    global $resultPage;       // from custom.php
    global $resultsAnchorTag; // from custom.php
    global $levelLimit;       // from custom.php

    $format = array();          // template containing all possible HTML that we can produce

    $format[0]['start'] = '<div class="col-sm-3">';     // format[0] is a larger container, that encloses a group of format[1] i.e. level 1 
    $format[0]['end']   = '</div><!-- end column -->';
        // We originally started a new column for each level 1, but heights were very unbalanced:
        //     <row>
        //         Keyword 1     Keyword 2     Keyword 3     Keyword 4 
        //         Keyword 5     Keyword 6
        //     </row>
        // To avoid orphaned chunks of keywords across the page, we now arrange the topics
        // by grouping top-level items into the same Bootstrap <column>:
        //     <row>
        //         Keyword 1     Keyword 3     Keyword 5     Keyword 6
        //         Keyword 2     Keyword 4
        //     </row>

    $format[1]['start'] = '<div class="col-sm-3">';
    $format[1]['item']  = '<h2 id="%s" class="level1">%s</h2>';
    $format[1]['end']   = '</div><!-- end column -->';

    $format[3]['open'] = '<li class="dropdown">';
    $format[3]['content'] = '<a href="'.$resultPage.'?key1=%s'.$resultsAnchorTag.'">%s</a> (%s)';
    $format[3]['close'] = '</li>';

    $format[4]['startlist'] = '<a href="#" data-toggle="dropdown" class="dropdown-toggle">'
                            . '<span class="glyphicon glyphicon-chevron-down"></span>'
                            . '</a>'
                            . '<ul class="dropdown-menu level%s">';
    $format[4]['endlist'] = '</ul>';

    $default = array();
    $default['startlist'] = '<ul class="level%s">';
    $default['endlist']   = '</ul>';
    $default['open'] = '<li>';
    $default['content'] = '<a href="'.$resultPage.'?key1=%s'.$resultsAnchorTag.'">%s</a>&nbsp;(%s)';
    $default['close'] = '</li>';

    $result = '';
    foreach ($tree as $key => $info) {
        if (ignore($key)) continue;
        if ($levelLimit && $level>$levelLimit) break; // debug: reduce the amount of output

        // init to default HTML, and allow switch() to override selected items
        $startlist = sprintf( $default['startlist'], $level) ;
        $endlist   = $default['endlist'];
        $opentag   = $default['open'];
        $content   = sprintf( $default['content'], urlencode($key), $key, count($keyword_to_files[$key]) );
        $closetag  = $default['close'];

        switch ($level) {
            
            case 1: // topmost levels will start new columns with a bold title
                    $opentag = $format[1]['start'];
                    $content = PHP_EOL . $indent . sprintf($format[1]['item'], strtolower(urlencode($key)), $key);
                    $closetag = $format[1]['end'];
                    break;
            
            case 3: // third level optionally includes caret that opens the fourth level
                    $opentag = $format[3]['open'];
                    $content = sprintf( $format[3]['content'], urlencode($key), $key, count($keyword_to_files[$key]));
                    $closetag = $format[3]['close'];
                    break;
            
            case 4: // fourth level uses bootstrap dropdown menu support to reveal additional lists
                    $startlist = $format[4]['startlist'];
                    $endlist = $format[4]['endlist'];
                    break;

            default: // nothing - default values were assigned before switch()
                    break;
        }

        $result .= (PHP_EOL . $indent . $opentag);  // open HTML tag
        if (is_array($info)) {
            $result .= $content . showTree($info,  $keyword_to_files, $level+1, $indent.'    ');
        } else {
            $result .= $info . '<b>!!!</b>';   // debug - is this ever used? I think it's eliminated by "if ignore($key)"
        }
        $result .= $closetag;   // close HTML tag

    }
    if (strlen($result) > 0 && $level>1) {
        // if this step issued any <li> at all, then they must be surrounded with <ul>...</ul>
        $result = PHP_EOL . $indent . $startlist
                .$result
                .PHP_EOL . $indent . $endlist;
    }
    return $result;
}
function showCompleteKeywordIndexSimple($tree) {
    // For example and test, here's the simplest possible way to show the keyword hierarchy
    $list1started = false;
    foreach ($tree as $key1 => $info1) {
        if (ignore($key1)) continue;
        if (!$list1started) echo '<ol class="level1">'.PHP_EOL;
        $list1started = true;
        $format = '  <li id="%s">%s'.PHP_EOL;
        printf($format, strtolower($key1), $key1);

        if (is_array($info1)) {
            $list2started = false;
            foreach ($info1 as $key2 => $info2) {
                if (ignore($key2)) continue;
                if (!$list2started) echo '    <ol class="level2">'.PHP_EOL;
                $list2started = true;
                echo "      <li>$key2".PHP_EOL;

                if (is_array($info2)) {
                    $list3started = false;
                    foreach ($info2 as $key3 => $info3) {
                        if (ignore($key3)) continue;
                        if (!$list3started) echo '        <ol class="level3">'.PHP_EOL;
                        $list3started = true;
                        echo "          <li>$key3".PHP_EOL;

                        if (is_array($info3)) {
                            $list4started = false;
                            foreach ($info3 as $key4 => $info4) {
                                if (ignore($key4)) continue;
                                if (!$list4started) echo '            <ol class="level4">'.PHP_EOL;
                                $list4started = true;
                                echo "              <li>$key4".PHP_EOL;

                                if (is_array($info4)) {
                                    $list5started = false;
                                    foreach ($info4 as $key5 => $info5) {
                                        if (ignore($key5)) continue;
                                        if (!$list5started) echo '                <ol class="level5">'.PHP_EOL;
                                        $list5started = true;
                                        echo "                  <li>$key5".PHP_EOL;

                                        if (is_array($info5)) {
                                            $list6started = false;
                                            foreach ($info5 as $key6 => $info6) {
                                                if (ignore($key6)) continue;
                                                if (!$list6started) '                    <ol class="level6">'.PHP_EOL;
                                                $list6started = true;
                                                echo "                    <li>$key6".PHP_EOL;

                                                if (is_array($info6)) {
                                                    showError('Sorry, we have not implemented support for nesting keywords 6 deep.', __FILE__, __LINE__);
                                                }
                                            }
                                        }
                                        if ($list6started) echo '              </ol><!-- '.__LINE__.' -->'.PHP_EOL;
                                        echo '                  </li><!-- '.__LINE__.' -->'.PHP_EOL;
                                    }
                                }
                                if ($list5started) echo '                </ol><!-- '.__LINE__.' -->'.PHP_EOL;
                                echo '              </li><!-- '.__LINE__.' -->'.PHP_EOL;
                            }
                        }
                        if ($list4started) echo '            </ol><!-- '.__LINE__.' -->'.PHP_EOL;
                        echo '          </li><!-- '.__LINE__.' -->'.PHP_EOL;
                    }
                }
                if ($list3started) echo '        </ol><!-- '.__LINE__.' -->'.PHP_EOL;
                echo '      </li><!-- '.__LINE__.' -->'.PHP_EOL;
            }
        }
        if ($list2started) echo '    </ol><!-- '.__LINE__.' -->'.PHP_EOL;
        echo '  </li><!-- '.__LINE__.' -->'.PHP_EOL;
    }
    if ($list1started) echo '</ol><!-- '.__LINE__.' -->'.PHP_EOL;
}

function showCompleteKeywordIndex($tree, $indent) {
    // Top-level function to generate entire keyword index in HTML
    // Input:
    //       $tree = data structure representing keyword database, previously read disk using unserialize()
    //       $indent = string containing spaces for indentation level
    // Example output:
    //1a     <div class="row text-left keywordindex row-of-keys">
    //2a         <div class="col-sm-3">  <!-- level 1 -->
    //3              <h2>Locations</h2>
    //4a             <ul>
    //5a                 <li><a href="">Cities</a>  <!-- level 2 -->
    //6a                     <ul>
    //7                          <li><a href="">Seattle</li>  <!-- level 3 -->
    //7                          <li><a href="">Tacoma</li>   (repeat for each level 3)
    //6b                     </ul>
    //5b                   </li>                    (repeat block for each level 2)
    //4b             </ul>
    //2b         </div><!-- end column -->
    //1b     </div><!-- end row -->

    // You can edit these HTML templates as needed:
    // http://php.net/manual/en/function.sprintf.php
    $level0start = $indent.'<div class="row text-left keywordindex row-of-keys">'.PHP_EOL;   // start row
    $level0end   = $indent.'</div><!-- end row -->'.PHP_EOL; // end row

    $level1start = $indent.'  <div class="col-sm-3">  <!-- level 1 -->'.PHP_EOL;     // start column
    $level1item  = $indent.'    <h2 id="%s" class="level1">%s</h2>'.PHP_EOL;  // title top level
    $level1end   = $indent.'  </div><!-- end column -->'.PHP_EOL;  // end column

    $level2start  = $indent.'    <ul class="level2">'.PHP_EOL;   // start level 2 list
    $level2item   = $indent.'      <li><a href="results.html?key2=%s">%s</a> (%s)'.PHP_EOL;    // item level 2
    $level2enditem= $indent.'      </li>'.PHP_EOL; 
    $level2end    = $indent.'    </ul><!-- 2 -->'.PHP_EOL;  // end level 2

    $level3start  = $indent.'        <ul class="level3">'.PHP_EOL;   // start level 3 list
    $level3item   = $indent.'          <li><a href="results.html?key3=%s">%s</a> (%s)'.PHP_EOL;  // item level 3 NO dropdown
    $level3item_with_dropdown =
                    $indent.'          <li class="dropdown">'.PHP_EOL                            // item level 3 WITH dropdown
                   .$indent.'            %s (%s)'.PHP_EOL 
                   .$indent.'            <a href="#" data-toggle="dropdown" class="dropdown-toggle">'.PHP_EOL 
                   .$indent.'              <span class="glyphicon glyphicon-chevron-down"></span>'.PHP_EOL 
                   .$indent.'            </a>'.PHP_EOL 
                   .$indent.'            <ul class="dropdown-menu level4"><!-- '.__LINE__.' -->'.PHP_EOL;
    $level3enditem= $indent.'          </li>'.PHP_EOL;
    $level3end    = $indent.'        </ul><!-- 3 -->'.PHP_EOL;  // end level 3 

    $level4start  = $indent.'            <ul class="dropdown-menu level4"><!-- '.__LINE__.' -->'.PHP_EOL;   // start level 4 list
    $level4item   = $indent.'              <li><a href="results.html?key1=%s">%s</a> (%s)'.PHP_EOL;
    $level4itemend= $indent.'              </li>'.PHP_EOL;
    $level4end    = $indent.'            </ul><!-- 4 -->'.PHP_EOL;  // end level 4 

    $level5start  = $indent.'              <ul class="level5">'.PHP_EOL;   // start level 5 list
    $level5item   = $indent.'                <li><a href="results.html?key1=%s">%s</a> (%s)</li>'.PHP_EOL;
    $level5end    = $indent.'              </ul><!-- 5 -->'.PHP_EOL;  // end level 5

    // Sanity check
    if (empty($tree)) {
        showError("Internal error: Trying to display keyword tree but we have no data.", __FILE__, __LINE__);
        return;
    }

    // Loop through tree data structure that contains nested keywords
    printf($level0start.PHP_EOL);   // start row
    $liststarted = array_fill(0, 6, false); // keep track of which "start list" <ul> levels have been started
                // this is needed because we need to look ahead to see if a <li> is going to be issued

    foreach ($tree as $key1 => $info1) {
        //echo "<p>Top item = $key1</p>".PHP_EOL;    // debug

        printf($level1start);    // start column <div>
        //                  #id keyword        keyword
        printf($level1item, strtolower($key1), $key1);

        // does this L1 item contain sub-levels? if so, show them
        if (is_array($info1)) {
            printf($level2start);    // start unordered list
            foreach ($info1 as $key2 => $info2) {
                if (ignore($key2)) continue;
                printf($level2item,
                        urlencode($key2),   // url parameter
                        $key2,              // keyword
                        '2');               // count

                // does this L2 item contain sub-levels? if so, show them
                if (is_array($info2)) {
                    $list3started = false;
                    foreach ($info2 as $key3 => $info3) {
                        if (ignore($key3)) continue;
                        if (!$list3started) printf($level3start);    // start list 3
                        $list3started = true;
                        printf($level3item,
                                urlencode($key3),   // url parameter
                                $key3,              // keyword
                                '3');               // count

                        // does this L3 item contain sub-levels? if so, show them
                        if (is_array($info3)) {
                            $list4started = false;
                            
                            foreach ($info3 as $key4 => $info4) {
                                if (ignore($key4)) continue;
                                if (!$list4started) {
                                    printf($level4start);   // start list 4
                                }
                                $list4started = true;
                                printf($level4item,
                                        urlencode($key4),   // url parameter
                                        $key4,              // keyword
                                        '4');               // count

                                // does this L4 item contain sub-levels? if so, show them
                                if (is_array($info4)) {
                                    $list5started = false;
                                    foreach ($info4 as $key5 => $info5) {
                                        if (ignore($key5)) continue;
                                        if (!$list5started) printf($level5start);   // start list 5
                                        $list5started = true;
                                        printf($level5item,
                                                urlencode($key5),   // url parameter
                                                $key5,              // keyword
                                                '5');               // count

                                        // does list L5 item contain sub-levels? if so, show them
                                        foreach ($info5 as $key6 => $info6) {
                                            if (ignore($key6)) continue;

                                            showWarning("Found keyword '$key6' at nesting level 6.'
                                            .' The keyword tree has more nested levels than is currently supported.
                                            .'<b>Archivist:</b> Please use Lightroom to review your keyword hierarchy and re-export your images.");
                                        }

                                    }
                                    if ($list5started) printf($level5end);
                                }
                                printf($level4itemend);
                            }
                            if ($list4started) printf($level4end);
                        }
                        printf($level3enditem);
                    }
                    if ($list3started) printf($level3end);    // end list
                }
                printf($level2enditem);
            }
            printf($level2end);     // end unordered list
        }
        printf($level1end);  // end column <div>
    }
    printf($level0end);      // end row
}

